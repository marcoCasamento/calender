// <auto-generated />
using System;
using Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(CalendarDbContext))]
    [Migration("20250802142013_v1_SeedData")]
    partial class v1_SeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("Api.Data.Animal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("OwnerEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Animals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f47ac10b-58cc-4372-a567-0e02b2c3d479"),
                            BirthDate = new DateTime(2022, 8, 2, 16, 20, 12, 713, DateTimeKind.Local).AddTicks(5201),
                            Name = "Dog",
                            OwnerEmail = "dogowner@example.com",
                            OwnerId = new Guid("62fadb2e-b711-4850-9903-8b9b1c81a2e0"),
                            OwnerName = "Dog Owner"
                        },
                        new
                        {
                            Id = new Guid("f47ac10b-58cc-4372-a567-0e02b2c3d477"),
                            BirthDate = new DateTime(2023, 8, 2, 16, 20, 12, 715, DateTimeKind.Local).AddTicks(5894),
                            Name = "Cat",
                            OwnerEmail = "catowner@example.com",
                            OwnerId = new Guid("2fceeec4-e524-4905-80eb-f4870d396be0"),
                            OwnerName = "Cat Owner"
                        },
                        new
                        {
                            Id = new Guid("f47ac10b-58cc-4372-a567-0e02b2c3d476"),
                            BirthDate = new DateTime(2024, 8, 2, 16, 20, 12, 715, DateTimeKind.Local).AddTicks(5922),
                            Name = "Rabbit",
                            OwnerEmail = "rabbitsowner@example.com",
                            OwnerId = new Guid("bc013cd8-d77b-4000-8a12-13c3a1dda6eb"),
                            OwnerName = "Rabbit Owner"
                        });
                });

            modelBuilder.Entity("Api.Data.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AnimalId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("VeterinarianId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f47ac10b-58cc-4372-a567-0e02b2c3d479"),
                            AnimalId = new Guid("f47ac10b-58cc-4372-a567-0e02b2c3d479"),
                            CustomerId = new Guid("62fadb2e-b711-4850-9903-8b9b1c81a2e0"),
                            EndTime = new DateTime(2025, 8, 3, 17, 20, 12, 716, DateTimeKind.Local).AddTicks(8727),
                            Notes = "Vet appointment",
                            StartTime = new DateTime(2025, 8, 3, 16, 20, 12, 716, DateTimeKind.Local).AddTicks(8551),
                            Status = 0,
                            VeterinarianId = new Guid("f47ac10b-58cc-4372-a567-0e02b2c3d481")
                        },
                        new
                        {
                            Id = new Guid("f47ac10b-58cc-4372-a567-0e02b2c3d480"),
                            AnimalId = new Guid("f47ac10b-58cc-4372-a567-0e02b2c3d479"),
                            CustomerId = new Guid("62fadb2e-b711-4850-9903-8b9b1c81a2e0"),
                            EndTime = new DateTime(2025, 8, 7, 17, 20, 12, 716, DateTimeKind.Local).AddTicks(9281),
                            Notes = "Follow-up check",
                            StartTime = new DateTime(2025, 8, 7, 16, 20, 12, 716, DateTimeKind.Local).AddTicks(9276),
                            Status = 0,
                            VeterinarianId = new Guid("f47ac10b-58cc-4372-a567-0e02b2c3d481")
                        });
                });

            modelBuilder.Entity("Api.Data.Appointment", b =>
                {
                    b.HasOne("Api.Data.Animal", "Animal")
                        .WithMany()
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");
                });
#pragma warning restore 612, 618
        }
    }
}
